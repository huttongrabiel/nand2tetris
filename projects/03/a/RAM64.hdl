// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    /* Working implementation, first T :) */
    DMux8Way(in=load, sel[0]=address[3], sel[1]=address[4], sel[2]=address[5], a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);
    RAM8(in=in, load=a, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=Out0); 
    RAM8(in=in, load=b, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=Out1); 
    RAM8(in=in, load=c, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=Out2); 
    RAM8(in=in, load=d, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=Out3); 
    RAM8(in=in, load=e, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=Out4); 
    RAM8(in=in, load=f, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=Out5); 
    RAM8(in=in, load=g, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=Out6); 
    RAM8(in=in, load=h, address[0]=address[0], address[1]=address[1], address[2]=address[2], out=Out7); 
    Mux8Way16(a=Out0, b=Out1, c=Out2, d=Out3, e=Out4, f=Out5, g=Out6, h=Out7, sel[0]=address[3], sel[1]=address[4], sel[2]=address[5], out=out);
}
