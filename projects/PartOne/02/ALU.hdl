// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

  PARTS:
  
  /* WORKING IMPLEMENTATION IN 19 LINES!!! */

  /* Zero x and y */ 
  And16(a=x, b=false, out=ZX); // ZX
  Mux16(a=x, b=ZX, sel=zx, out=PostZXValue);
  
  /* NX */
  Not16(in=PostZXValue, out=notX); // NX, Negating all 16 x bits
  Mux16(a=PostZXValue, b=notX, sel=nx, out=PostNotXValue);
  
  /* ZX */
  And16(a=y, b=false, out=ZY); // ZY
  Mux16(a=y, b=ZY, sel=zy, out=PostZYValue);
  
  /* ZY */
  Not16(in=PostZYValue, out=notY); // NY, Negating all 16 y bits
  Mux16(a=PostZYValue, b=notY, sel=ny, out=PostNotYValue);

  /* F */
  And16(a=PostNotXValue, b=PostNotYValue, out=xAND16y); // F, f==0 bitwise and
  Add16(a=PostNotXValue, b=PostNotYValue, out=xADD16y); // F, f==1 x+y
  Mux16(a=xAND16y, b=xADD16y, sel=f, out=PostFValue);
  
  /* NO */
  Not16(in=PostFValue, out=notOut); // NO, Negate out will need to feed finalOut to this
  Mux16(a=PostFValue, b=notOut, sel=no, out[15]=negBit, out[0..7]=finalOut1, out[8..15]=finalOut2, out=out);
  
  /* ZR */
  Or8Way(in=finalOut1, out=OrRightHalf);
  Or8Way(in=finalOut2, out=OrLeftHalf); 
  Or(a=OrRightHalf, b=OrLeftHalf, out=OrOfAllBits);
  Not(in=OrOfAllBits, out=zr);
 
  /* NG */
  Mux(a=false, b=true, sel=negBit, out=ng); 
}
