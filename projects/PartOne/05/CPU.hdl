// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    /* IT WORKS, IT ACTUALLY WORKS!!!!!!! */
    
    /* LHS Mux16 */
    Mux16(a=instruction, b=ALUOutput, sel=instruction[15], out=LHSMux16);

    /* A Register */
    Mux(a=true, b=instruction[5], sel=instruction[15], out=ARegLoad);
    ARegister(in=LHSMux16, load=ARegLoad, out[0..14]=addressM, out=AReg);

    /* D Register */
    Mux(a=false, b=instruction[4], sel=instruction[15], out=DRegLoad);
    DRegister(in=ALUOutput, load=DRegLoad, out=DReg);

    /* Middle Mux16 */
    Mux16(a=AReg, b=inM, sel=instruction[12], out=MiddleMux16);

    /* writeM */
    And(a=instruction[15], b=instruction[3], out=writeM);

    /* ALU, if instruction[15]==0, 110000*/
    Mux(a=true, b=instruction[11], sel=instruction[15], out=ZX);
    Mux(a=true, b=instruction[10], sel=instruction[15], out=NX);
    Mux(a=false, b=instruction[9], sel=instruction[15], out=ZY);
    Mux(a=false, b=instruction[8], sel=instruction[15], out=NY);
    Mux(a=false, b=instruction[7], sel=instruction[15], out=F);
    Mux(a=false, b=instruction[6], sel=instruction[15], out=NO);
    ALU(x=DReg, y=MiddleMux16 , zx=ZX , nx=NX , zy=ZY , ny=NY , f=F , no=NO , out=ALUOutput, out=outM, zr=zr, ng=ng);

    /* NULL */
    Or(a=instruction[0], b=instruction[1], out=OrJmp1);
    Or(a=OrJmp1, b=instruction[2], out=noJump);

    /* JEQ */
    And(a=zr, b=zr, out=JEQ);

    /* JLT */
    And(a=ng, b=ng, out=JLT);

    /* JGT */
    Or(a=zr, b=ng, out=JGT);
    Not(in=JGT, out=JGTRes);

    /* JGE */
    Or(a=ng, b=ng, out=ngImd);
    Not(in=ngImd, out=JGE);

    /* JNE */
    Or(a=zr, b=zr, out=zrImd);
    Not(in=zrImd, out=JNE);

    /* JLE */
    Xor(a=zr, b=ng, out=JLE);

    Mux8Way16(a[0]=noJump, b[0]=JGTRes, c[0]=JEQ, d[0]=JGE, e[0]=JLT, f[0]=JNE, g[0]=JLE, h[0]=true, sel=instruction[0..2], out[0]=JmpResult);
    And(a=JmpResult, b=instruction[15], out=FinalJmpResult);

    /* Program Counter */
    PC(in=AReg, load=FinalJmpResult, inc=true, reset=reset, out[0..14]=pc);
}

/*
 
 LHS Mux16
  - Takes in instruction and ALU ouput
    - instruction should be chosen when instruction[15] is 0 and 
      ALU Ouput should be chosen when instruction[15] is 1. 
    - This is because instruction[15] denotes whether we are making
      a computation or not

  A Register
    - Takes in the output from the LHS Mux16
    - The A Register is loaded either when instruction[15]==0 or D1==1
    - (D1==1 AND instruction[15]==1)  or instruction[15]==0

  D Register

  ALU
    - Control Bits
      - control bits are instruction[6..11]
    - x = inM
    - y = A Register
    - Dealing with A Instructions and the ALU
      - if we have an a instruction, then we just want to select
        the MiddleMux16 output. 


  **Middle Mux16 (Not certain on this one)
    - Takes in the A Register and M (inM)
      - inM is RAM[A] (i.e. M)
      - if instruction[15]==0 then it picks inM
      - if instruction[15]==1 then it picks A Register

  Program Counter
    - REMEMBER THE PRECENDENCE (inc < load < reset)
    - reset = reset
    - in = A Register
    - load and inc are trickier
    - load
      - we only load based on the outcome of the jmp operations, those must
        be completed first and the output of the jump operation loaded into
        the load input
    - inc
      - inc can be just be true. the only time when we don't increment
        the program counter is when we load or reset and that functionality
        is already handled within the program counter itself
    - out[0..14] = pc

  JMP Instructions (Possible to use DMux8Way)
    - null: or the jump bits together
    - JEQ: zr==1
    - JLT: ng==1
    - JGT: zr==0 AND ng==0
    - JGE: ng==0
    - JNE: zr==0
    - JLE: zr XOR ng (zr==0 and ng==1) or (zr==1 and ng==0)
    - JMP: and the jump bits together
