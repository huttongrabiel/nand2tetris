// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
  /* Initial idea/thoughts:
    * Or16 on out will tell out if out is 0 which means we can set zr 
      feeding the Or16 output into zr
    * We need to determine when something is negative
    * Can be written in less than 20 lines
    * How do we zero every bit?
      - set the output to false  
  */

  Not16(in=x, out=notX); // NX, Negating all 16 x bits
  Not16(in=y, out=notY); // NY, Negating all 16 y bits

  Not16(in=finalOut, out=notOut); // NO, Negate out will need to feed finalOut to this

  And16(a=x, b=y, out=xAND16y); // F, f==0 bitwise and
  Add16(a=x, b=y, out=xADD16y); // F, f==1 x+y

  /* Or the 16 bits together to check if the value is 0 */
  Or8Way(in=x[0..7], out=OrLeftSubBusX);
  Or8Way(in=x[8..15], out=OrRightSubBusX);
  Or8Way(in=y[0..7], out=OrLeftSubBusY);
  Or8Way(in=y[8..15], out=OrRightSubBusY);
  Or(a=OrLeftSubBusX, b=OrRightSubBusX, out=OrX);
  Or(a=OrLeftSubBusY, b=OrRightSubBusY, out=OrY);
  

}
