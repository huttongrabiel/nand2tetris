#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "translator.h"
#include "parser.h"

struct map {
  char *instruction;
  char *binaryInstruction;
} opCode;

static const struct map DestOpCodes[8] = { 
  {"null", "000"},
  {"M", "001"},
  {"D", "010"},
  {"MD", "011"},
  {"A", "100"},
  {"AM", "101"},
  {"AD", "110"},
  {"AMD", "111"}
};

static const struct map JumpOpCodes[8] = { 
  {"null", "000"},
  {"JGT", "001"},
  {"JEQ", "010"},
  {"JGE", "011"},
  {"JLT", "100"},
  {"JNE", "101"},
  {"JLE", "110"},
  {"JMP", "111"}
};

static const struct map CompOpCodes[28] = { 
  {"0", "0101010"},
  {"1", "0111111"},
  {"-1", "0111010"},
  {"D", "0001100"},
  {"A", "0110000"},
  {"!D", "0001101"},
  {"!A", "0110011"},
  {"-D", "0001111"},
  {"-A", "0110011"},
  {"D+1", "0011111"},
  {"A+1", "0110111"},
  {"D-1", "0001110"},
  {"A-1", "0110010"},
  {"D+A", "0000010"},
  {"D-A", "0010011"},
  {"A-D", "0000111"},
  {"D&A", "0000000"},
  {"D|A", "0010101"},
  {"M", "1110000"},
  {"!M", "1110001"},
  {"-M", "1110011"},
  {"M+1", "1110111"},
  {"M-1", "1110010"},
  {"D+M", "1000010"},
  {"D-M", "1010011"},
  {"M-D", "1000111"},
  {"D&M", "1000000"},
  {"D|M", "1010101"}
};

int main(void) {
  char *destValue = dest();
  char *testResult = linearSearch(destValue, DestOpCodes);
  printf("%s\n", testResult); 
}

char *linearSearch(char *instruction, static const struct map opCodeArray[]) {
  // linearSearch is fast enough, there is, at most, 28 options
  char *result;
  result = malloc(opCodeArray[0].binaryInstruction * sizeof(char));

  int opCodeArraySize = sizeof(opCodeArray) / sizeof(opCode[0]);
  for (int i = 0; i < opCodeArraySize; i++) {
    if (instruction == opCodeArray[i].instruction) {
      result = opCodeArray[i].binaryInstruction;
    }
  }
  
  return result;
} 
